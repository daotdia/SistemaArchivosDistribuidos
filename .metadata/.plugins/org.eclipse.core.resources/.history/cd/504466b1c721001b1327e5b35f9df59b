package es.uned.sisdist.servidor;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import es.uned.sisdist.common.ServicioDatosInterface;

public class ServicioDatosImpl implements ServicioDatosInterface{

	private List<String> usuarios_registrados, repositorios_registrados;
	private HashMap<String, Integer> usuarios_activos, repositorios_activos;
	private HashMap<Integer,List<Repositorio>> repositorios_usuario;
	private List<Repositorio> repositorios_libres;
	
	public ServicioDatosImpl (ArrayList<Repositorio> repositorios) {
		usuarios_registrados = new ArrayList<String>();
		repositorios_registrados = new ArrayList<String>();
		usuarios_activos = new HashMap<String,Integer>();
		repositorios_activos = new HashMap<String,Integer>();
		repositorios_usuario = new HashMap<Integer,List<Repositorio>>();
	}

	public void registrarCliente(String nombre) throws RemoteException {
		usuarios_registrados.add(nombre);
	}

	public void registrarRepositorio(String nombre) throws RemoteException {
		repositorios_registrados.add(nombre);
	}

	public void deleteCliente(String nombre) throws RemoteException {
		usuarios_registrados.remove(usuarios_registrados.indexOf(nombre));
	}

	public void deleteRepositorio(String nombre) throws RemoteException {
		repositorios_registrados.remove(repositorios_registrados.indexOf(nombre));
	}

	//Para a침adir repositorio o usuario al Map de activos.
	public void addId(String nombre, int identificador, int tipo) throws RemoteException {
		if(tipo == 0) {
			usuarios_activos.put(nombre, identificador);
		}
		else
			repositorios_activos.put(nombre, identificador);
	}

	@Override
	public int linkRepositorio(int id_cliente) throws RemoteException {
		int identificador = -1;
		if(!repositorios_libres.isEmpty()) {
			//A침ado el repositorio a la lista de repositorios del usuairo.
			repositorios_usuario.get(id_cliente).add(repositorios_libres.get(0));
			//Asocio el identificador con el identificador del repositorio a침adido.
			identificador = repositorios_libres.get(0).getId();
			//Elimino el repositorio de la lista de repositorios libres.
			repositorios_libres.remove(0);
		}
		else 
			throw new RuntimeException ("No quedan repositorios libres, vuelva a intentarlo m치s tarde o inicialice un nuevo repositorio");
		return identificador;
	}

	public int unlinkRepositorios(int id_cliente) throws RemoteException {
		int identificador = -1;
		ArrayList<Repositorio> repositorios = (ArrayList<Repositorio>) repositorios_usuario.get(id_cliente);
		
		if(!repositorios.isEmpty()) {
			identificador = repositorios.get(0).getId();
			repositorios.clear();
		}
		
		return identificador;
	}

	public List<Repositorio> getRepositoriosCliente(int id_cliente) throws RemoteException {
		return repositorios_usuario.get(id_cliente);
	}

	public List<Repositorio> getListaRepositoriosLibres() throws RemoteException {
		return repositorios_libres;
	}
	
	public List<Repositorio> getListaRepositoriosLinkados() throws RemoteException {
		List<Repositorio> repositorios_linkados = new ArrayList<Repositorio>();
		for (Map.Entry<Integer,List<Integer>> entrada : repositorios_usuario.entrySet()) {
			for(ArrayList<Repositorio> repos : entrada.getValue()) {
				
			}
		}
	}

	@Override
	public List<String> getListaFicheros(int sesion) throws RemoteException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> getListaClientes() throws RemoteException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap<String, Integer> getListaClientesActivos() throws RemoteException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap<String, Integer> getListaRepositoriosActivos() throws RemoteException {
		// TODO Auto-generated method stub
		return null;
	}
	
}

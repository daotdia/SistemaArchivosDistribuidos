package es.uned.sisdist.servidor;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

import es.uned.sisdist.common.Repositorio;
import es.uned.sisdist.common.ServicioAutenticacionInterface;
import es.uned.sisdist.common.ServicioDatosInterface;
import es.uned.sisdist.common.SourcePath;

public class Servidor implements Remote {
	
	private static ServicioDatosInterface bd;
	private static ServicioAutenticacionInterface au;
	private static List<Repositorio> repositorios;
	
	private static final int NUMERO_REPOSITORIOS = 100;
	
	public Servidor(ServicioDatosInterface bd, ServicioAutenticacionInterface au) throws RemoteException {
		this.bd = bd;
		this.au = au;
	}
	
	public static void main (String[] Args) throws Exception{
		SourcePath.setCodebase(ServicioAutenticacionInterface.class);
		
		Registry registry = LocateRegistry.createRegistry(7777);
		
		ServicioDatosInterface datos = new ServicioDatosImpl();
		Remote datos_remotos = UnicastRemoteObject.exportObject(datos,8888);
		registry.rebind("datos_remotos", datos_remotos);
		
		ServicioDatosInterface datos_rmi = (ServicioDatosInterface) registry.lookup("datos_remotos");
		ServicioAutenticacionInterface autenticacion = new ServicioAutenticacionImpl(datos_rmi);
		Remote autenticacion_remota = UnicastRemoteObject.exportObject(autenticacion, 6666);
		registry.rebind("autenticacion_remota", autenticacion_remota);
		
		ServicioAutenticacionInterface autenticacion_rmi = (ServicioAutenticacionInterface) registry.lookup("autenticacion_remota");
		Servidor servidor = new Servidor(datos_rmi,autenticacion_rmi);
		Remote servidor_remoto = UnicastRemoteObject.exportObject(servidor,9999);
		
		System.out.println("Servidor listo, con los servicios remotos listos");
		
	}
	
	public static void gestion_usuarios (String nombre, int tipo, int opcion) 
			throws RemoteException {
		int id_cliente;
		int id_repositorio;
		
		switch(opcion) {
		case 0:
			au.registrarObjeto(nombre, tipo);
			break;
		case 1:
			id_cliente = au.iniciarSesion(nombre, tipo);
			id_repositorio = bd.linkRepositorio(id_cliente);
			//crearCarpeta(id_cliente, id_repositorio);
			break;
		case 2:
			id_cliente = au.cerrarSesion(nombre, tipo);
			id_repositorio = bd.unlinkRepositorios(id_cliente);
			//deleteCarpeta(id_cliente, id_repositorio);
			break;
		case 3:
			au.deleteObjeto(nombre, tipo);
			break;
		}
	}
	
}
